{"ast":null,"code":"import _classCallCheck from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/src/dashboard/Event/updateEvent.js\";\nimport React, { Component } from 'react';\nimport { postEventUpdateAPICALL, postEventLocationUpdateAPICALL, postEventDateTimeUpdateAPICALL, postDeleteEventAPICALL, getParticipantsDataAPICall } from '../../utils/requests';\nimport GLOBAL from \"../../utils/global\";\nimport { withRouter } from 'react-router-dom';\nimport Form from \"react-jsonschema-form\";\nimport DatePicker from \"react-datepicker\";\nimport Dropdown from \"react-dropdown\";\nimport { MAP_MARKERS, MAP_MARKERS_NAMES } from \"../../utils/mapMarkers\";\nimport LocationPicker from \"react-location-picker\";\nimport Popup from \"reactjs-popup\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n/* Default position */\n\nvar defaultPosition = {\n  lat: 33.538379,\n  lng: -5.105569\n};\nvar uiSchema = {\n  createdAt: {\n    \"ui:readonly\": true\n  },\n  updatedAt: {\n    \"ui:readonly\": true\n  },\n  eventHashedID: {\n    \"ui:readonly\": true\n  }\n};\nvar schema = {\n  \"title\": \"Update Event\",\n  \"description\": \"Update an existing event\",\n  \"type\": \"object\",\n  \"required\": [\"eventTitle\", \"eventDescription\", \"maxParticipants\"],\n  \"properties\": {\n    \"eventHashedID\": {\n      \"type\": \"string\",\n      \"title\": \"Event System ID\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\",\n      \"title\": \"Created At\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      \"title\": \"Last Updated At\"\n    },\n    \"adminAUIID\": {\n      \"type\": \"string\",\n      \"title\": \"Admin AUI ID\"\n    },\n    \"eventTitle\": {\n      \"type\": \"string\",\n      \"title\": \"Event Title\"\n    },\n    \"eventDescription\": {\n      \"type\": \"string\",\n      \"title\": \"Event Description\"\n    },\n    \"maxParticipants\": {\n      \"type\": \"integer\",\n      \"title\": \"Maximum Participants\"\n    },\n    \"organizer\": {\n      \"type\": \"string\",\n      \"title\": \"Organizer\"\n    }\n  }\n};\n\nvar UpdateEvent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UpdateEvent, _Component);\n\n  function UpdateEvent(props) {\n    var _this;\n\n    _classCallCheck(this, UpdateEvent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateEvent).call(this, props));\n\n    _this.onSubmitEventUpdate = function (_ref, e) {\n      var _this2 = this;\n\n      var formData = _ref.formData;\n      return postEventUpdateAPICALL(this.props.history.location.state.data.data.data.hashedIDEvent, formData.adminAUIID, formData.eventTitle, formData.eventDescription, formData.maxParticipants, formData.organizer).then(function (hashedIDEventUpdated) {\n        console.log(hashedIDEventUpdated);\n\n        _this2.setState({\n          eventID: hashedIDEventUpdated\n        });\n\n        if (hashedIDEventUpdated.length === 25) {\n          GLOBAL.HASHEDIDEVENTCREATED = hashedIDEventUpdated; // if (window.confirm('Would you like to bind this event to a location?')) {\n          //     this.refs.popupEventBtn.click();\n          // } else {\n\n          alert(\"Event Updated Successfully\"); //     this.forceUpdate();\n          // }\n        }\n      });\n    };\n\n    _this.state = {\n      startDate: new Date(_this.props.history.location.state.data.data.data.startDate),\n      endDate: new Date(_this.props.history.location.state.data.data.data.endDate),\n      // startDate: \"\",\n      // endDate: \"\",\n      position: {\n        lat: 0,\n        lng: 0\n      },\n      commonLocation: -1\n    };\n    console.log(_this.props.history.location.state.data.data.data);\n    schema.properties.eventHashedID.default = _this.props.history.location.state.data.data.data.hashedIDEvent;\n    schema.properties.createdAt.default = _this.props.history.location.state.data.data.data.createdAtConverted;\n    schema.properties.updatedAt.default = _this.props.history.location.state.data.data.data.updatedAtConverted;\n    schema.properties.adminAUIID.default = _this.props.history.location.state.data.data.data.adminAUIID;\n    schema.properties.eventTitle.default = _this.props.history.location.state.data.data.data.eventTitle;\n    schema.properties.eventDescription.default = _this.props.history.location.state.data.data.data.eventDescription;\n    schema.properties.maxParticipants.default = _this.props.history.location.state.data.data.data.maxParticipants;\n    schema.properties.organizer.default = _this.props.history.location.state.data.data.data.organizer; // Bind                                                                        \n\n    _this.handleLocationChange = _this.handleLocationChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleStartDateTimeChange = _this.handleStartDateTimeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleEndDateTimeChange = _this.handleEndDateTimeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateLocationOfEvent = _this.updateLocationOfEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmitEventUpdate = _this.onSubmitEventUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UpdateEvent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"handleStartDateTimeChange\",\n    value: function handleStartDateTimeChange(date) {\n      this.setState({\n        startDate: date\n      }); // console.log(this.state.startDate);\n    }\n  }, {\n    key: \"handleEndDateTimeChange\",\n    value: function handleEndDateTimeChange(date) {\n      this.setState({\n        endDate: date\n      });\n    }\n  }, {\n    key: \"handleLocationChange\",\n    value: function handleLocationChange(_ref2) {\n      var position = _ref2.position,\n          address = _ref2.address;\n      // Set new location\n      this.setState({\n        position: position,\n        address: address\n      });\n    }\n  }, {\n    key: \"deleteEvent\",\n    value: function deleteEvent(hashedIDEvent) {\n      return postDeleteEventAPICALL(hashedIDEvent).then(function (isDelete) {\n        return isDelete;\n      });\n    }\n  }, {\n    key: \"updateLocationOfEvent\",\n    value: function updateLocationOfEvent() {\n      if (this.state.commonLocation !== -1) {\n        this.state.position.lat = MAP_MARKERS[this.state.commonLocation].latitude;\n        this.state.position.lng = MAP_MARKERS[this.state.commonLocation].longitude;\n      }\n\n      return postEventLocationUpdateAPICALL(this.props.history.location.state.data.data.data.hashedIDEvent, this.state.position.lat, this.state.position.lng, this.state.commonLocation).then(function (isChanged) {\n        if (isChanged) {\n          alert(\"Event Updated Successfully\");\n        } else {\n          alert(\"An error has happened while updating the location of the event\");\n        }\n      });\n    }\n  }, {\n    key: \"getParticipantsData\",\n    value: function getParticipantsData(usersIDs, hashedIDEvent, type) {\n      var _this3 = this;\n\n      return getParticipantsDataAPICall(usersIDs).then(function (data) {\n        if (data.status !== \"success\") {\n          alert(\"Could not get participants info\");\n        } else {\n          console.log(data.data);\n\n          switch (type) {\n            case \"participants\":\n              _this3.props.history.push('/admin/view-participants', {\n                ParticipantsReady: data.data,\n                hashedIDEvent: hashedIDEvent\n              });\n\n              break;\n\n            case \"fullyCompleted\":\n              _this3.props.history.push('/admin/view-fully-completed', {\n                FullyCompletedReady: data.data,\n                hashedIDEvent: hashedIDEvent\n              });\n\n              break;\n\n            default:\n              console.log(\"Unrecognized type\");\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(Form, {\n        schema: schema,\n        uiSchema: uiSchema,\n        onChange: console.log(\"changed\"),\n        onSubmit: this.onSubmitEventUpdate,\n        onError: console.log(\"errors\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }), React.createElement(Popup, {\n        ref: \"popupEventDateAndTimeBtn\",\n        className: \"popup\",\n        trigger: React.createElement(\"button\", {\n          className: \"btn btn-primary\",\n          ref: \"popupEventDateAndTimeBtn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, \"Update Dates\"),\n        position: \"right center\",\n        modal: true,\n        closeOnDocumentClick: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          marginBottom: 20,\n          marginTop: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginBottom: 20,\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Pick a Date and Time\"), React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginRight: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(DatePicker, {\n        style: {\n          justifyContent: 'center',\n          textAlign: 'left',\n          marginRight: \"20px\"\n        },\n        selected: this.state.startDate,\n        timeInputLabel: \"Time:\",\n        todayButton: \"Today\",\n        minDate: new Date(),\n        onChange: this.handleStartDateTimeChange,\n        dateFormat: \"MM/dd/yyyy h:mm aa\",\n        placeholderText: \"Select a start date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(DatePicker, {\n        style: {\n          justifyContent: 'center',\n          textAlign: 'right'\n        },\n        selected: this.state.endDate,\n        timeInputLabel: \"Time:\",\n        todayButton: \"Today\",\n        minDate: new Date(),\n        onChange: this.handleEndDateTimeChange,\n        dateFormat: \"MM/dd/yyyy h:mm aa\",\n        placeholderText: \"Select an end date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick() {\n          return postEventDateTimeUpdateAPICALL(_this4.props.history.location.state.data.data.data.hashedIDEvent, _this4.state.startDate, _this4.state.endDate).then(function (isChanged) {\n            if (isChanged) {\n              alert(\"Event Date Updated Successfully\");\n            } else {\n              alert(\"An error has happened while updating the date\");\n\n              _this4.forceUpdate();\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Submit\")))), React.createElement(Popup, {\n        ref: \"popupEventLocationBtn\",\n        className: \"popup\",\n        trigger: React.createElement(\"button\", {\n          className: \"btn btn-success\",\n          ref: \"popupEventLocationBtn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, \"Update Location\"),\n        position: \"right center\",\n        modal: true,\n        closeOnDocumentClick: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          marginBottom: 20,\n          marginTop: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginBottom: 20,\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, \"Pick a location\"), React.createElement(Dropdown, {\n        style: {\n          marginBottom: 20\n        },\n        options: MAP_MARKERS_NAMES,\n        onChange: function onChange(data) {\n          if (data.label !== \"Other\") _this4.setState({\n            commonLocation: MAP_MARKERS_NAMES.indexOf(data.label)\n          });else _this4.setState({\n            commonLocation: -1\n          });\n        },\n        value: MAP_MARKERS_NAMES[0],\n        placeholder: \"Select an option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(LocationPicker, {\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: '50%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: '400px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299\n          },\n          __self: this\n        }),\n        defaultPosition: defaultPosition,\n        onChange: this.handleLocationChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-outline-success\",\n        style: {\n          width: '97%'\n        },\n        onClick: function onClick() {\n          _this4.updateLocationOfEvent();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, \"Bind Location to Event\")))), React.createElement(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: function onClick() {\n          _this4.getParticipantsData(_this4.props.history.location.state.data.data.data.participantIDs, _this4.props.history.location.state.data.data.data.hashedIDEvent, \"participants\"); // this.props.history.push('/admin/view-participants', {ParticipantsReady: this.props.history.location.state.data.data.data.ParticipantsReady});\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"View Participants\"), React.createElement(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: function onClick() {\n          _this4.getParticipantsData(_this4.props.history.location.state.data.data.data.fullyCompletedIDs, _this4.props.history.location.state.data.data.data.hashedIDEvent, \"fullyCompleted\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"View Fully Completed\"), React.createElement(\"button\", {\n        className: \"btn btn-dark\",\n        onClick: function onClick() {\n          _this4.props.history.push('/admin/event-statistics', {\n            hashedIDEvent: _this4.props.history.location.state.data.data.data.hashedIDEvent\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, \"Statistics\"), React.createElement(\"button\", {\n        style: {\n          position: \"absolute\",\n          right: 0\n        },\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          var answer = window.prompt(\"Are you sure want to delete this Event? Please enter the title of the event:\");\n\n          if (answer === _this4.props.history.location.state.data.data.data.eventTitle) {\n            _this4.deleteEvent(_this4.props.history.location.state.data.data.data.hashedIDEvent);\n          } else {\n            alert(\"The titles don't match. Aborting...\");\n          }\n\n          console.log(answer);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"Delete\")));\n    }\n  }]);\n\n  return UpdateEvent;\n}(Component);\n\nexport default withRouter(UpdateEvent);","map":{"version":3,"sources":["/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/src/dashboard/Event/updateEvent.js"],"names":["React","Component","postEventUpdateAPICALL","postEventLocationUpdateAPICALL","postEventDateTimeUpdateAPICALL","postDeleteEventAPICALL","getParticipantsDataAPICall","GLOBAL","withRouter","Form","DatePicker","Dropdown","MAP_MARKERS","MAP_MARKERS_NAMES","LocationPicker","Popup","defaultPosition","lat","lng","uiSchema","createdAt","updatedAt","eventHashedID","schema","UpdateEvent","props","onSubmitEventUpdate","e","formData","history","location","state","data","hashedIDEvent","adminAUIID","eventTitle","eventDescription","maxParticipants","organizer","then","hashedIDEventUpdated","console","log","setState","eventID","length","HASHEDIDEVENTCREATED","alert","startDate","Date","endDate","position","commonLocation","properties","default","createdAtConverted","updatedAtConverted","handleLocationChange","bind","handleStartDateTimeChange","handleEndDateTimeChange","updateLocationOfEvent","date","address","isDelete","latitude","longitude","isChanged","usersIDs","type","status","push","ParticipantsReady","FullyCompletedReady","marginBottom","marginTop","textAlign","display","justifyContent","alignItems","marginRight","forceUpdate","label","indexOf","height","width","getParticipantsData","participantIDs","fullyCompletedIDs","right","answer","window","prompt","deleteEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n    postEventUpdateAPICALL,\n    postEventLocationUpdateAPICALL,\n    postEventDateTimeUpdateAPICALL,\n    postDeleteEventAPICALL,\n    getParticipantsDataAPICall\n} from '../../utils/requests';\nimport GLOBAL from \"../../utils/global\";\nimport {withRouter} from 'react-router-dom';\nimport Form from \"react-jsonschema-form\";\nimport DatePicker from \"react-datepicker\";\nimport Dropdown from \"react-dropdown\";\nimport {MAP_MARKERS, MAP_MARKERS_NAMES} from \"../../utils/mapMarkers\";\nimport LocationPicker from \"react-location-picker\";\nimport Popup from \"reactjs-popup\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\n/* Default position */\nconst defaultPosition = {\n    lat: 33.538379,\n    lng: -5.105569\n};\n\nconst uiSchema = {\n    createdAt: {\n        \"ui:readonly\": true\n    },\n    updatedAt: {\n        \"ui:readonly\": true\n    },\n    eventHashedID: {\n        \"ui:readonly\": true\n    }\n};\n\n\nconst schema = {\n    \"title\": \"Update Event\",\n    \"description\": \"Update an existing event\",\n    \"type\": \"object\",\n    \"required\": [\n        \"eventTitle\",\n        \"eventDescription\",\n        \"maxParticipants\"\n    ],\n    \"properties\": {\n        \"eventHashedID\": {\n            \"type\": \"string\",\n            \"title\": \"Event System ID\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\",\n            \"title\": \"Created At\"\n        },\n        \"updatedAt\": {\n            \"type\": \"string\",\n            \"title\": \"Last Updated At\"\n        },\n        \"adminAUIID\": {\n            \"type\": \"string\",\n            \"title\": \"Admin AUI ID\"\n        },\n        \"eventTitle\": {\n            \"type\": \"string\",\n            \"title\": \"Event Title\"\n        },\n        \"eventDescription\": {\n            \"type\": \"string\",\n            \"title\": \"Event Description\"\n        },\n        \"maxParticipants\": {\n            \"type\": \"integer\",\n            \"title\": \"Maximum Participants\",\n        },\n        \"organizer\": {\n            \"type\": \"string\",\n            \"title\": \"Organizer\"\n        }\n    }\n};\n\n\nclass UpdateEvent extends Component {                                              \n  constructor (props) {                                                            \n    super(props);                                                                  \n    this.state = {                                                                 \n        startDate: new Date(this.props.history.location.state.data.data.data.startDate),\n        endDate: new Date(this.props.history.location.state.data.data.data.endDate),\n        // startDate: \"\",\n        // endDate: \"\",\n        position: {                                                                \n            lat: 0,                                                                \n            lng: 0                                                                 \n        },\n        commonLocation: -1\n    };\n      console.log(this.props.history.location.state.data.data.data);\n\n\n      schema.properties.eventHashedID.default = this.props.history.location.state.data.data.data.hashedIDEvent;\n      schema.properties.createdAt.default = this.props.history.location.state.data.data.data.createdAtConverted;\n      schema.properties.updatedAt.default = this.props.history.location.state.data.data.data.updatedAtConverted;\n      schema.properties.adminAUIID.default = this.props.history.location.state.data.data.data.adminAUIID;\n      schema.properties.eventTitle.default = this.props.history.location.state.data.data.data.eventTitle;\n      schema.properties.eventDescription.default = this.props.history.location.state.data.data.data.eventDescription;\n      schema.properties.maxParticipants.default = this.props.history.location.state.data.data.data.maxParticipants;\n      schema.properties.organizer.default = this.props.history.location.state.data.data.data.organizer;\n                                                                                   \n    // Bind                                                                        \n    this.handleLocationChange = this.handleLocationChange.bind(this);              \n    this.handleStartDateTimeChange = this.handleStartDateTimeChange.bind(this);    \n    this.handleEndDateTimeChange = this.handleEndDateTimeChange.bind(this);        \n    this.updateLocationOfEvent = this.updateLocationOfEvent.bind(this);\n    this.onSubmitEventUpdate = this.onSubmitEventUpdate.bind(this);\n\n  }\n\n    componentDidMount(){\n\n    }\n\n    handleStartDateTimeChange(date) {\n        this.setState({\n            startDate: date\n        });\n        // console.log(this.state.startDate);\n    }\n\n    handleEndDateTimeChange(date) {\n        this.setState({\n            endDate: date\n        });\n    }\n\n\n    handleLocationChange ({ position, address }) {\n\n    // Set new location\n    this.setState({ position, address });\n  }\n\n    deleteEvent(hashedIDEvent){\n        return postDeleteEventAPICALL(hashedIDEvent)\n            .then(isDelete => {\n                return isDelete;\n            })\n    }\n\n\n    updateLocationOfEvent () {\n        if(this.state.commonLocation !== -1){\n            this.state.position.lat = MAP_MARKERS[this.state.commonLocation].latitude;\n            this.state.position.lng = MAP_MARKERS[this.state.commonLocation].longitude;\n        }\n        return postEventLocationUpdateAPICALL(this.props.history.location.state.data.data.data.hashedIDEvent, this.state.position.lat, this.state.position.lng, this.state.commonLocation)\n            .then((isChanged) => {\n                if (isChanged) {\n                    alert(\"Event Updated Successfully\");\n                } else {\n                    alert(\"An error has happened while updating the location of the event\");\n                }\n\n            })\n    }\n\n    getParticipantsData(usersIDs, hashedIDEvent, type){\n        return getParticipantsDataAPICall(usersIDs)\n            .then(data => {\n                if(data.status!==\"success\"){\n                    alert(\"Could not get participants info\");\n                }else{\n                    console.log(data.data);\n                    switch(type){\n                        case \"participants\": this.props.history.push('/admin/view-participants', {ParticipantsReady: data.data, hashedIDEvent: hashedIDEvent});\n                            break;\n                        case \"fullyCompleted\": this.props.history.push('/admin/view-fully-completed', {FullyCompletedReady: data.data, hashedIDEvent: hashedIDEvent});\n                            break;\n                        default: console.log(\"Unrecognized type\");\n                    }\n\n                }\n            })\n    }\n    \n onSubmitEventUpdate = function({formData}, e) {\n    return postEventUpdateAPICALL(this.props.history.location.state.data.data.data.hashedIDEvent, formData.adminAUIID, formData.eventTitle, formData.eventDescription, formData.maxParticipants, formData.organizer)\n        .then(hashedIDEventUpdated => {\n            console.log(hashedIDEventUpdated);\n            this.setState({\n                eventID: hashedIDEventUpdated\n            });\n\n            if(hashedIDEventUpdated.length === 25){\n                GLOBAL.HASHEDIDEVENTCREATED = hashedIDEventUpdated;\n                // if (window.confirm('Would you like to bind this event to a location?')) {\n                //     this.refs.popupEventBtn.click();\n                // } else {\n                    alert(\"Event Updated Successfully\");\n                //     this.forceUpdate();\n                // }\n            }\n        })\n};\n\n\n\n  render () {\n    return (   \n      <div>\n        <div>\n            <Form schema={schema}\n                  uiSchema={uiSchema}\n            onChange={console.log(\"changed\")}\n            onSubmit={this.onSubmitEventUpdate}\n            onError={console.log(\"errors\")} />\n\n\n            {/*Update Date and Time*/}\n            <Popup\n                ref={\"popupEventDateAndTimeBtn\"}\n                className='popup'\n                trigger={<button className='btn btn-primary' ref={\"popupEventDateAndTimeBtn\"}>Update Dates</button>}\n                position=\"right center\"\n                modal\n                closeOnDocumentClick>\n\n                <div style={{marginBottom: 20, marginTop: 20}}>\n                    <h3 style={{marginBottom: 20, textAlign: 'center'}}>Pick a Date and Time</h3>\n                    <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', marginRight: 20}}>\n                        <DatePicker\n                            style={{justifyContent: 'center', textAlign: 'left', marginRight: \"20px\"}}\n                            selected={this.state.startDate}\n                            timeInputLabel=\"Time:\"\n                            todayButton={\"Today\"}\n                            minDate={new Date()}\n                            onChange={this.handleStartDateTimeChange}\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\n                            placeholderText=\"Select a start date\"\n                        />\n\n\n                        <DatePicker\n                            style={{justifyContent: 'center', textAlign: 'right'}}\n                            selected={this.state.endDate}\n                            timeInputLabel=\"Time:\"\n                            todayButton={\"Today\"}\n                            minDate={new Date()}\n                            onChange={this.handleEndDateTimeChange}\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\n                            placeholderText=\"Select an end date\"\n                        />\n\n                        <button className='btn btn-primary' onClick={() => {\n                            return postEventDateTimeUpdateAPICALL(this.props.history.location.state.data.data.data.hashedIDEvent,this.state.startDate, this.state.endDate)\n                                .then((isChanged) => {\n                                    if (isChanged) {\n                                        alert(\"Event Date Updated Successfully\");\n                                    } else {\n                                        alert(\"An error has happened while updating the date\");\n                                        this.forceUpdate();\n                                    }\n                                })\n                        }}>Submit</button>\n                    </div>\n                </div>\n            </Popup>\n\n            {/*Update Location*/}\n            <Popup\n                ref={\"popupEventLocationBtn\"}\n                className='popup'\n                trigger={<button className='btn btn-success' ref={\"popupEventLocationBtn\"}>Update Location</button>}\n                position=\"right center\"\n                modal\n                closeOnDocumentClick>\n\n                <div style={{marginBottom: 20, marginTop: 20}}>\n\n                    <h3 style={{marginBottom: 20, textAlign: 'center'}}>Pick a location</h3>\n                    <Dropdown style={{marginBottom: 20}} options={MAP_MARKERS_NAMES} onChange={(data) => {\n                        if(data.label !== \"Other\")\n                            this.setState({\n                                commonLocation: MAP_MARKERS_NAMES.indexOf(data.label)\n                            });\n                        else\n                            this.setState({\n                                commonLocation: -1\n                            });\n                        \n\n                    }} value={MAP_MARKERS_NAMES[0]} placeholder=\"Select an option\" />\n                    <div>\n                        <LocationPicker\n                            containerElement={ <div style={ {height: '50%'} } /> }\n                            mapElement={ <div style={ {height: '400px'} } /> }\n                            defaultPosition={defaultPosition}\n                            onChange={this.handleLocationChange} />\n                        <button className='btn btn-outline-success' style={{\n                            width: '97%'}} onClick={()=>{\n                            this.updateLocationOfEvent();\n                        }}>Bind Location to Event</button>\n                    </div>\n\n\n                </div>\n\n            </Popup>\n\n            {/*View Participants*/}\n\n            <button className='btn btn-warning' onClick={()=>{\n                this.getParticipantsData(this.props.history.location.state.data.data.data.participantIDs, this.props.history.location.state.data.data.data.hashedIDEvent, \"participants\");\n                // this.props.history.push('/admin/view-participants', {ParticipantsReady: this.props.history.location.state.data.data.data.ParticipantsReady});\n            }}>View Participants</button>\n\n\n            <button className='btn btn-warning' onClick={()=>{\n                this.getParticipantsData(this.props.history.location.state.data.data.data.fullyCompletedIDs, this.props.history.location.state.data.data.data.hashedIDEvent, \"fullyCompleted\");\n            }}>View Fully Completed</button>\n\n            <button className='btn btn-dark' onClick={()=>{\n                this.props.history.push('/admin/event-statistics',{hashedIDEvent: this.props.history.location.state.data.data.data.hashedIDEvent});\n            }}>Statistics</button>\n\n            <button style={{position: \"absolute\", right: 0}} className='btn btn-danger' onClick={()=>{\n                let answer = window.prompt(\"Are you sure want to delete this Event? Please enter the title of the event:\")\n                if(answer === this.props.history.location.state.data.data.data.eventTitle){\n                    this.deleteEvent(this.props.history.location.state.data.data.data.hashedIDEvent);\n                }else{\n                    alert(\"The titles don't match. Aborting...\")\n                }\n                console.log(answer);\n            }}>Delete</button>\n\n\n\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default withRouter(UpdateEvent);"]},"metadata":{},"sourceType":"module"}