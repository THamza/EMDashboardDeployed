{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactAutobind = require('react-autobind');\n\nvar _reactAutobind2 = _interopRequireDefault(_reactAutobind);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _lodash = require('lodash.debounce');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.omit');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _suggestions = require('./suggestions');\n\nvar _suggestions2 = _interopRequireDefault(_suggestions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar SearchBar = function (_React$Component) {\n  _inherits(SearchBar, _React$Component);\n\n  function SearchBar(props) {\n    _classCallCheck(this, SearchBar);\n\n    var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));\n\n    if (props.renderSearchButton && !props.onSearch) {\n      throw new Error('onSearch is required when rendering search button');\n    }\n\n    _this.state = {\n      focusedSuggestion: null,\n      isFocused: false,\n      searchTerm: '',\n      value: ''\n    };\n    (0, _reactAutobind2.default)(_this);\n    _this.handleDebouncedChange = (0, _lodash2.default)(_this.handleDebouncedChange, props.delay);\n    return _this;\n  }\n\n  _createClass(SearchBar, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.autoFocus) {\n        this.input.focus();\n      }\n\n      document.addEventListener('click', this.handleClick);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.handleClick);\n    }\n  }, {\n    key: 'setFocusedSuggestion',\n    value: function setFocusedSuggestion(movingDown) {\n      var _state = this.state,\n          index = _state.focusedSuggestion,\n          searchTerm = _state.searchTerm;\n      var suggestions = this.props.suggestions;\n      var last = suggestions.length - 1;\n      var next = void 0;\n\n      if (movingDown) {\n        next = index === null ? 0 : index + 1;\n      } else {\n        next = index === null ? last : index - 1;\n      }\n\n      this.setState({\n        focusedSuggestion: next > last || next < 0 ? null : next,\n        value: suggestions[next] || searchTerm\n      });\n    }\n  }, {\n    key: 'clearSearch',\n    value: function clearSearch() {\n      this.setState({\n        focusedSuggestion: null,\n        searchTerm: '',\n        value: ''\n      });\n      this.input.focus();\n      this.props.onClear();\n    }\n  }, {\n    key: 'toggleFocus',\n    value: function toggleFocus() {\n      this.setState({\n        isFocused: !this.state.isFocused\n      });\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(event) {\n      if (!this.container.contains(event.target)) {\n        this.props.onClear();\n      }\n    }\n  }, {\n    key: 'handleDebouncedChange',\n    value: function handleDebouncedChange(searchTerm) {\n      this.setState({\n        searchTerm: searchTerm\n      });\n      this.props.onChange(searchTerm);\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(event) {\n      var value = event.target.value;\n      var searchTerm = value.toLowerCase().trim();\n\n      if (!value) {\n        this.clearSearch();\n        return;\n      }\n\n      this.setState({\n        focusedSuggestion: null,\n        value: value\n      });\n\n      if (searchTerm) {\n        this.handleDebouncedChange(searchTerm);\n      }\n    }\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n          event.preventDefault();\n          this.setFocusedSuggestion(event.key === 'ArrowDown');\n          break;\n\n        case 'Enter':\n          this.handleSearch();\n          break;\n\n        case 'Escape':\n          this.handleEscape();\n          break;\n      }\n    }\n  }, {\n    key: 'handleEscape',\n    value: function handleEscape() {\n      this.setState({\n        focusedSuggestion: null,\n        searchTerm: ''\n      });\n      this.input.blur();\n      this.props.onClear();\n    }\n  }, {\n    key: 'handleHover',\n    value: function handleHover(index) {\n      this.setState({\n        focusedSuggestion: index\n      });\n    }\n  }, {\n    key: 'handleSelection',\n    value: function handleSelection(suggestion) {\n      this.setState({\n        focusedSuggestion: null,\n        value: suggestion\n      });\n      this.props.onClear();\n\n      if (this.props.onSelection) {\n        this.props.onSelection(suggestion);\n      }\n    }\n  }, {\n    key: 'handleSearch',\n    value: function handleSearch() {\n      this.props.onClear();\n      this.props.onSearch(this.state.value.trim());\n    }\n  }, {\n    key: 'renderClearButton',\n    value: function renderClearButton() {\n      return _react2.default.createElement('button', {\n        className: this.props.styles.clearButton,\n        onClick: this.clearSearch\n      });\n    }\n  }, {\n    key: 'renderSearchButton',\n    value: function renderSearchButton() {\n      return _react2.default.createElement('button', {\n        className: this.props.styles.submitButton,\n        onClick: this.handleSearch\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this,\n          _classNames;\n\n      var props = this.props,\n          state = this.state;\n      var renderSearchButton = props.renderSearchButton,\n          styles = props.styles;\n      var attributes = (0, _lodash4.default)(props, Object.keys(SearchBar.propTypes));\n      var renderClearButton = state.value && props.renderClearButton;\n      var renderSuggestions = state.value && props.suggestions.length > 0;\n      return _react2.default.createElement('div', {\n        className: styles.wrapper,\n        ref: function ref(_ref2) {\n          return _this2.container = _ref2;\n        }\n      }, _react2.default.createElement('div', {\n        className: (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, styles.field, true), _defineProperty(_classNames, styles.fieldFocused, state.isFocused), _defineProperty(_classNames, styles.hasSuggestions, props.suggestions.length > 0), _classNames))\n      }, _react2.default.createElement('input', _extends({}, attributes, {\n        className: styles.input,\n        type: 'text',\n        ref: function ref(_ref) {\n          return _this2.input = _ref;\n        },\n        value: state.value,\n        onChange: this.handleChange,\n        onFocus: this.toggleFocus,\n        onBlur: this.toggleFocus,\n        onKeyDown: props.suggestions && this.handleKeyDown\n      })), renderClearButton && this.renderClearButton(), renderSearchButton && this.renderSearchButton()), renderSuggestions && _react2.default.createElement(_suggestions2.default, {\n        focusedSuggestion: state.focusedSuggestion,\n        onSelection: this.handleSelection,\n        onSuggestionHover: this.handleHover,\n        searchTerm: state.searchTerm,\n        styles: styles,\n        suggestions: props.suggestions,\n        suggestionRenderer: props.suggestionRenderer\n      }));\n    }\n  }]);\n\n  return SearchBar;\n}(_react2.default.Component);\n\nSearchBar.propTypes = {\n  autoFocus: _propTypes2.default.bool,\n  delay: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  onClear: _propTypes2.default.func.isRequired,\n  onChange: _propTypes2.default.func.isRequired,\n  onSearch: _propTypes2.default.func,\n  onSelection: _propTypes2.default.func,\n  renderClearButton: _propTypes2.default.bool,\n  renderSearchButton: _propTypes2.default.bool,\n  styles: _propTypes2.default.object,\n  suggestions: _propTypes2.default.array.isRequired,\n  suggestionRenderer: _propTypes2.default.func\n};\nSearchBar.defaultProps = {\n  autoCapitalize: 'off',\n  autoComplete: 'off',\n  autoCorrect: 'off',\n  autoFocus: false,\n  delay: 0,\n  maxLength: 100,\n  placeholder: '',\n  renderClearButton: false,\n  renderSearchButton: false,\n  styles: {\n    wrapper: 'react-search-bar__wrapper',\n    field: 'react-search-bar__field',\n    focusedField: 'react-search-bar__field--focused',\n    hasSuggestions: 'react-search-bar__field--has-suggestions',\n    input: 'react-search-bar__input',\n    clearButton: 'react-search-bar__clear',\n    submitButton: 'react-search-bar__submit',\n    suggestions: 'react-search-bar__suggestions',\n    suggestion: 'react-search-bar__suggestion'\n  },\n  suggestionRenderer: function suggestionRenderer(suggestion) {\n    return _react2.default.createElement('div', null, suggestion);\n  }\n};\nexports.default = SearchBar;","map":null,"metadata":{},"sourceType":"script"}