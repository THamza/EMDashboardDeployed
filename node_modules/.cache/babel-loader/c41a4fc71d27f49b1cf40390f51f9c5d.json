{"ast":null,"code":"import _classCallCheck from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/src/dashboard/addForm.js\";\nimport React from 'react';\nimport Select from 'react-select';\nimport lang from '../utils/language';\nimport { postTableData, getTableData } from '../utils/requests';\nvar language = 'eng';\n\nvar AddForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddForm, _React$Component);\n\n  // setting the state in order to handle change in form values\n  function AddForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddForm).call(this, props)); // this variable will hold the names of all accessors sent as props\n\n    var accessors = []; // this variable will be used to hold the values entered by the user in the form\n\n    var values = {};\n    var options = {}; // going through the columns and preparing the variables that will be used later\n\n    var _loop = function _loop(idx) {\n      var column = _this.props.columns[idx];\n      var accessor = column.accessor;\n      accessors.push(accessor);\n      values[accessor] = '';\n\n      if (column.type === 'fixed') {\n        values[accessor] = _this.props.fixed[accessor];\n      }\n\n      if (column.type === 'link') {\n        _this.getLinkOptions(column).then(function (values) {\n          _this.setState({\n            loading: true\n          });\n\n          options[accessor] = values;\n\n          _this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    for (var idx in _this.props.columns) {\n      _loop(idx);\n    }\n\n    _this.state = {\n      error: '',\n      values: values,\n      loading: false,\n      options: options\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddForm, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var newState = this.state;\n\n      if (event.target) {\n        newState.values[event.target.name] = event.target.value;\n      } else {\n        newState.values[event.name] = event.value;\n      }\n\n      this.setState(newState);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      console.log(\"values\");\n      console.log(this.state.values);\n      postTableData(this.props.object, this.state.values).then(function (res) {\n        var data = res.data;\n\n        if (data.success) {\n          _this2.setState({\n            error: \"\"\n          });\n\n          window.location.reload();\n        } else {\n          _this2.setState({\n            error: data.message\n          });\n        }\n      }).catch(function (err) {\n        console.error(err);\n      });\n    }\n  }, {\n    key: \"getLinkOptions\",\n    value: function getLinkOptions(column) {\n      var link = column.link;\n      return getTableData(link.object).then(function (res) {\n        if (res.data.success) {\n          var _values = [];\n\n          for (var idx in res.data.result) {\n            var element = res.data.result[idx];\n            var id = element[link.attribute];\n            var shown = '';\n\n            for (var idx1 in link.shown) {\n              shown += element[link.shown[idx1]] + ' ';\n            }\n\n            var value = {\n              value: id,\n              label: shown,\n              name: column.accessor\n            };\n\n            _values.push(value);\n          }\n\n          return _values;\n        } else {\n          return console.log(res.data.message);\n        }\n      }).catch(function (err) {\n        return console.error(err);\n      });\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(accessor) {\n      console.log(accessor);\n      var options = this.state.options[accessor];\n      var value = this.state.values[accessor];\n\n      for (var idx in options) {\n        var option = options[idx];\n        console.log(option);\n\n        if (option.value === value) {\n          return option.label;\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // we use the props to create the form content here as we can't use loops inside the return\n      var formContent = [];\n      var temp = null; // looping through all the props and extracting the needed data\n\n      for (var idx in this.props.columns) {\n        var column = this.props.columns[idx];\n\n        if (!column.accessor) {\n          continue;\n        }\n\n        if (column.type === 'fixed') {\n          continue;\n        }\n\n        switch (column.type) {\n          case 'link':\n            var _options = this.state.options[column.accessor];\n            temp = React.createElement(\"label\", {\n              name: column.accessor,\n              className: \"form-group\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            }, column.Header, \":\", React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134\n              },\n              __self: this\n            }), React.createElement(Select, {\n              className: \"select\",\n              onChange: this.handleChange,\n              options: _options,\n              key: column.accessor,\n              value: this.state.values[column.accessor] && {\n                label: this.getLabel(column.accessor),\n                value: this.state.values[column.accessor]\n              },\n              placeholder: lang.prompts.select[language],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135\n              },\n              __self: this\n            }));\n            break;\n\n          case 'dropdown':\n            temp = React.createElement(\"label\", {\n              name: column.accessor,\n              className: \"form-group\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152\n              },\n              __self: this\n            }, column.Header, \":\", React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153\n              },\n              __self: this\n            }), React.createElement(Select, {\n              className: \"select\",\n              onChange: this.handleChange,\n              options: column.options,\n              key: column.accessor,\n              value: this.state.values[column.accessor] && {\n                label: this.state.values[column.accessor],\n                value: this.state.values[column.accessor]\n              },\n              placeholder: lang.prompts.select[language],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154\n              },\n              __self: this\n            }));\n            break;\n\n          case 'textarea':\n            temp = React.createElement(\"label\", {\n              className: \"form-group\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            }, column.Header, \":\", React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172\n              },\n              __self: this\n            }), React.createElement(\"textarea\", {\n              className: \"form-control\",\n              type: \"text\",\n              rows: column.rows,\n              cols: column.cols,\n              name: column.accessor,\n              key: column.accessor,\n              value: this.state.values[column.accessor],\n              onChange: this.handleChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 173\n              },\n              __self: this\n            }));\n            break;\n\n          default:\n            if (column.visible !== false) {\n              temp = React.createElement(\"label\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 184\n                },\n                __self: this\n              }, column.Header, \":\", React.createElement(\"br\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 185\n                },\n                __self: this\n              }), React.createElement(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                name: column.accessor,\n                key: column.accessor,\n                value: this.state.values[column.accessor],\n                onChange: this.handleChange,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 186\n                },\n                __self: this\n              }));\n            }\n\n        }\n\n        formContent.push(React.createElement(\"div\", {\n          key: column.accessor + 'div',\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, temp));\n      }\n\n      if (this.state.loading) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, this.state.error), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, formContent, React.createElement(\"input\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AddForm;\n}(React.Component);\n\nexport default AddForm;","map":{"version":3,"sources":["/Users/IDogueto/Desktop/Repositories/emdashboarddeployed/src/dashboard/addForm.js"],"names":["React","Select","lang","postTableData","getTableData","language","AddForm","props","accessors","values","options","idx","column","columns","accessor","push","type","fixed","getLinkOptions","then","setState","loading","state","error","handleChange","bind","handleSubmit","event","newState","target","name","value","preventDefault","console","log","object","res","data","success","window","location","reload","message","catch","err","link","result","element","id","attribute","shown","idx1","label","option","formContent","temp","Header","getLabel","prompts","select","rows","cols","visible","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,aAAR,EAAuBC,YAAvB,QAA0C,mBAA1C;AAEA,IAAMC,QAAQ,GAAG,KAAjB;;IAEMC,O;;;;;AACJ;AACA,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN,GADiB,CAEjB;;AACA,QAAIC,SAAS,GAAG,EAAhB,CAHiB,CAIjB;;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,OAAO,GAAG,EAAd,CANiB,CAOjB;;AAPiB,+BAQNC,GARM;AASf,UAAMC,MAAM,GAAG,MAAKL,KAAL,CAAWM,OAAX,CAAmBF,GAAnB,CAAf;AACA,UAAMG,QAAQ,GAAGF,MAAM,CAACE,QAAxB;AACAN,MAAAA,SAAS,CAACO,IAAV,CAAeD,QAAf;AACAL,MAAAA,MAAM,CAACK,QAAD,CAAN,GAAmB,EAAnB;;AACA,UAAGF,MAAM,CAACI,IAAP,KAAc,OAAjB,EAAyB;AACvBP,QAAAA,MAAM,CAACK,QAAD,CAAN,GAAmB,MAAKP,KAAL,CAAWU,KAAX,CAAiBH,QAAjB,CAAnB;AACD;;AACD,UAAGF,MAAM,CAACI,IAAP,KAAc,MAAjB,EAAwB;AACtB,cAAKE,cAAL,CAAoBN,MAApB,EACCO,IADD,CACM,UAACV,MAAD,EAAY;AAChB,gBAAKW,QAAL,CAAc;AAACC,YAAAA,OAAO,EAAE;AAAV,WAAd;;AACAX,UAAAA,OAAO,CAACI,QAAD,CAAP,GAAoBL,MAApB;;AACA,gBAAKW,QAAL,CAAc;AAACC,YAAAA,OAAO,EAAC;AAAT,WAAd;AACD,SALD;AAMD;AAvBc;;AAQjB,SAAK,IAAMV,GAAX,IAAkB,MAAKJ,KAAL,CAAWM,OAA7B,EAAqC;AAAA,YAA1BF,GAA0B;AAgBpC;;AAGD,UAAKW,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXd,MAAAA,MAAM,EAAEA,MAFG;AAGXY,MAAAA,OAAO,EAAE,KAHE;AAIXX,MAAAA,OAAO,EAAEA;AAJE,KAAb;AAMA,UAAKc,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AAlCiB;AAmClB;;;;iCAEYE,K,EAAO;AAClB,UAAIC,QAAQ,GAAG,KAAKN,KAApB;;AACA,UAAGK,KAAK,CAACE,MAAT,EAAgB;AACdD,QAAAA,QAAQ,CAACnB,MAAT,CAAgBkB,KAAK,CAACE,MAAN,CAAaC,IAA7B,IAAqCH,KAAK,CAACE,MAAN,CAAaE,KAAlD;AACD,OAFD,MAEK;AACHH,QAAAA,QAAQ,CAACnB,MAAT,CAAgBkB,KAAK,CAACG,IAAtB,IAA8BH,KAAK,CAACI,KAApC;AACD;;AACD,WAAKX,QAAL,CAAcQ,QAAd;AACD;;;iCAEYD,K,EAAO;AAAA;;AAChBA,MAAAA,KAAK,CAACK,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWb,MAAvB;AACAN,MAAAA,aAAa,CAAC,KAAKI,KAAL,CAAW4B,MAAZ,EAAmB,KAAKb,KAAL,CAAWb,MAA9B,CAAb,CACCU,IADD,CACM,UAACiB,GAAD,EAAS;AAAA,YACRC,IADQ,GACAD,GADA,CACRC,IADQ;;AAEb,YAAGA,IAAI,CAACC,OAAR,EAAgB;AACd,UAAA,MAAI,CAAClB,QAAL,CAAc;AAACG,YAAAA,KAAK,EAAE;AAAR,WAAd;;AACAgB,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,SAHD,MAGK;AACH,UAAA,MAAI,CAACrB,QAAL,CAAc;AAACG,YAAAA,KAAK,EAACc,IAAI,CAACK;AAAZ,WAAd;AACD;AACF,OATD,EASGC,KATH,CASS,UAACC,GAAD,EAAS;AAChBX,QAAAA,OAAO,CAACV,KAAR,CAAcqB,GAAd;AACD,OAXD;AAYD;;;mCAEchC,M,EAAO;AACpB,UAAIiC,IAAI,GAAGjC,MAAM,CAACiC,IAAlB;AACA,aAAOzC,YAAY,CAACyC,IAAI,CAACV,MAAN,CAAZ,CACNhB,IADM,CACD,UAACiB,GAAD,EAAS;AACb,YAAGA,GAAG,CAACC,IAAJ,CAASC,OAAZ,EAAoB;AAClB,cAAI7B,OAAM,GAAG,EAAb;;AACA,eAAK,IAAME,GAAX,IAAkByB,GAAG,CAACC,IAAJ,CAASS,MAA3B,EAAkC;AAChC,gBAAIC,OAAO,GAAGX,GAAG,CAACC,IAAJ,CAASS,MAAT,CAAgBnC,GAAhB,CAAd;AACA,gBAAIqC,EAAE,GAAGD,OAAO,CAACF,IAAI,CAACI,SAAN,CAAhB;AACA,gBAAIC,KAAK,GAAG,EAAZ;;AACA,iBAAK,IAAMC,IAAX,IAAmBN,IAAI,CAACK,KAAxB,EAA8B;AAC5BA,cAAAA,KAAK,IAAGH,OAAO,CAACF,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAD,CAAP,GAA4B,GAApC;AACD;;AACD,gBAAIpB,KAAK,GAAG;AAACA,cAAAA,KAAK,EAAEiB,EAAR;AAAYI,cAAAA,KAAK,EAAEF,KAAnB;AAA0BpB,cAAAA,IAAI,EAAElB,MAAM,CAACE;AAAvC,aAAZ;;AACAL,YAAAA,OAAM,CAACM,IAAP,CAAYgB,KAAZ;AACD;;AACD,iBAAOtB,OAAP;AACD,SAbD,MAcI;AACF,iBAAOwB,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,IAAJ,CAASK,OAArB,CAAP;AACD;AACF,OAnBM,EAoBNC,KApBM,CAoBA,UAACC,GAAD,EAAS;AACd,eAAOX,OAAO,CAACV,KAAR,CAAcqB,GAAd,CAAP;AACD,OAtBM,CAAP;AAuBD;;;6BAEQ9B,Q,EAAS;AAChBmB,MAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACA,UAAIJ,OAAO,GAAG,KAAKY,KAAL,CAAWZ,OAAX,CAAmBI,QAAnB,CAAd;AACA,UAAIiB,KAAK,GAAG,KAAKT,KAAL,CAAWb,MAAX,CAAkBK,QAAlB,CAAZ;;AACA,WAAK,IAAIH,GAAT,IAAgBD,OAAhB,EAAwB;AACtB,YAAI2C,MAAM,GAAG3C,OAAO,CAACC,GAAD,CAApB;AACAsB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ;;AACA,YAAGA,MAAM,CAACtB,KAAP,KAAeA,KAAlB,EAAwB;AACtB,iBAAOsB,MAAM,CAACD,KAAd;AACD;AACF;;AACD,aAAOrB,KAAP;AACD;;;6BAGK;AACN;AACA,UAAIuB,WAAW,GAAG,EAAlB;AACA,UAAIC,IAAI,GAAG,IAAX,CAHM,CAIN;;AACA,WAAK,IAAI5C,GAAT,IAAgB,KAAKJ,KAAL,CAAWM,OAA3B,EAAmC;AACjC,YAAMD,MAAM,GAAG,KAAKL,KAAL,CAAWM,OAAX,CAAmBF,GAAnB,CAAf;;AACA,YAAG,CAACC,MAAM,CAACE,QAAX,EAAoB;AAClB;AACD;;AACD,YAAGF,MAAM,CAACI,IAAP,KAAc,OAAjB,EAAyB;AACvB;AACD;;AACD,gBAAOJ,MAAM,CAACI,IAAd;AACE,eAAK,MAAL;AACE,gBAAIN,QAAO,GAAG,KAAKY,KAAL,CAAWZ,OAAX,CAAmBE,MAAM,CAACE,QAA1B,CAAd;AACAyC,YAAAA,IAAI,GAAG;AAAO,cAAA,IAAI,EAAE3C,MAAM,CAACE,QAApB;AAA+B,cAAA,SAAS,EAAG,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACIF,MAAM,CAAC4C,MADX,OACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADnB,EAEG,oBAAC,MAAD;AACE,cAAA,SAAS,EAAC,QADZ;AAEE,cAAA,QAAQ,EAAE,KAAKhC,YAFjB;AAGE,cAAA,OAAO,EAAEd,QAHX;AAIE,cAAA,GAAG,EAAEE,MAAM,CAACE,QAJd;AAKE,cAAA,KAAK,EACH,KAAKQ,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB,KACA;AACEsC,gBAAAA,KAAK,EAAE,KAAKK,QAAL,CAAc7C,MAAM,CAACE,QAArB,CADT;AAEEiB,gBAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB;AAFT,eAPJ;AAYE,cAAA,WAAW,EAAEZ,IAAI,CAACwD,OAAL,CAAaC,MAAb,CAAoBtD,QAApB,CAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,CAAP;AAiBM;;AACR,eAAK,UAAL;AACEkD,YAAAA,IAAI,GAAG;AAAO,cAAA,IAAI,EAAE3C,MAAM,CAACE,QAApB;AAA+B,cAAA,SAAS,EAAG,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACIF,MAAM,CAAC4C,MADX,OACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADnB,EAEG,oBAAC,MAAD;AACE,cAAA,SAAS,EAAC,QADZ;AAEE,cAAA,QAAQ,EAAE,KAAKhC,YAFjB;AAGE,cAAA,OAAO,EAAEZ,MAAM,CAACF,OAHlB;AAIE,cAAA,GAAG,EAAEE,MAAM,CAACE,QAJd;AAKE,cAAA,KAAK,EACH,KAAKQ,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB,KACA;AACEsC,gBAAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB,CADT;AAEEiB,gBAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB;AAFT,eAPJ;AAYE,cAAA,WAAW,EAAEZ,IAAI,CAACwD,OAAL,CAAaC,MAAb,CAAoBtD,QAApB,CAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,CAAP;AAiBA;;AACF,eAAK,UAAL;AACEkD,YAAAA,IAAI,GAAG;AAAO,cAAA,SAAS,EAAG,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI3C,MAAM,CAAC4C,MADX,OACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADnB,EAEG;AAAU,cAAA,SAAS,EAAC,cAApB;AAAmC,cAAA,IAAI,EAAC,MAAxC;AACA,cAAA,IAAI,EAAE5C,MAAM,CAACgD,IADb;AAEA,cAAA,IAAI,EAAEhD,MAAM,CAACiD,IAFb;AAGA,cAAA,IAAI,EAAEjD,MAAM,CAACE,QAHb;AAIA,cAAA,GAAG,EAAEF,MAAM,CAACE,QAJZ;AAKA,cAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB,CALP;AAMA,cAAA,QAAQ,EAAE,KAAKU,YANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,CAAP;AAUA;;AACF;AACE,gBAAIZ,MAAM,CAACkD,OAAP,KAAiB,KAArB,EAA2B;AACzBP,cAAAA,IAAI,GAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI3C,MAAM,CAAC4C,MADX,OACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnB,EAEG;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,SAAS,EAAC,cAA7B;AACE,gBAAA,IAAI,EAAE5C,MAAM,CAACE,QADf;AAEE,gBAAA,GAAG,EAAEF,MAAM,CAACE,QAFd;AAGE,gBAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWb,MAAX,CAAkBG,MAAM,CAACE,QAAzB,CAHT;AAIE,gBAAA,QAAQ,EAAE,KAAKU,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFH,CAAT;AAQC;;AA9DP;;AAiEA8B,QAAAA,WAAW,CAACvC,IAAZ,CAAiB;AAAK,UAAA,GAAG,EAAEH,MAAM,CAACE,QAAP,GAAgB,KAA1B;AAAiC,UAAA,SAAS,EAAG,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DyC,IAA3D,CAAjB;AACD;;AACD,UAAG,KAAKjC,KAAL,CAAWD,OAAd,EAAsB;AAAC,eAAO,IAAP;AAAY;;AACnC,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAG,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB,KAAKC,KAAL,CAAWC,KAAnC,CADF,EAEE;AAAM,QAAA,QAAQ,EAAE,KAAKG,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG4B,WADH,EAEE;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAiD,QAAA,KAAK,EAAC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAFF,CADF;AASD;;;;EAvMmBtD,KAAK,CAAC+D,S;;AA0M5B,eAAezD,OAAf","sourcesContent":["import React from 'react';\nimport Select from 'react-select'\nimport lang from '../utils/language'\nimport {postTableData, getTableData} from '../utils/requests';\n\nconst language = 'eng';\n\nclass AddForm extends React.Component {\n  // setting the state in order to handle change in form values\n  constructor(props) {\n    super(props);\n    // this variable will hold the names of all accessors sent as props\n    let accessors = [];\n    // this variable will be used to hold the values entered by the user in the form\n    let values = {};\n    let options = {};\n    // going through the columns and preparing the variables that will be used later\n    for (const idx in this.props.columns){\n      const column = this.props.columns[idx];\n      const accessor = column.accessor;\n      accessors.push(accessor);\n      values[accessor] = '';\n      if(column.type==='fixed'){\n        values[accessor] = this.props.fixed[accessor];\n      }\n      if(column.type==='link'){\n        this.getLinkOptions(column)\n        .then((values) => {\n          this.setState({loading: true});\n          options[accessor] = values;\n          this.setState({loading:false});\n        })\n      }\n    }\n\n\n    this.state = {\n      error: '',\n      values: values,\n      loading: false,\n      options: options\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    var newState = this.state;\n    if(event.target){\n      newState.values[event.target.name] = event.target.value;\n    }else{\n      newState.values[event.name] = event.value;\n    }\n    this.setState(newState);\n  }\n\n  handleSubmit(event) {\n      event.preventDefault();\n      console.log(\"values\");\n      console.log(this.state.values);\n      postTableData(this.props.object,this.state.values)\n      .then((res) => {\n        let {data} = res;\n        if(data.success){\n          this.setState({error: \"\"});\n          window.location.reload();\n        }else{\n          this.setState({error:data.message});\n        }\n      }).catch((err) => {\n        console.error(err)\n      });\n    }\n\n    getLinkOptions(column){\n      let link = column.link;\n      return getTableData(link.object)\n      .then((res) => {\n        if(res.data.success){\n          let values = [];\n          for (const idx in res.data.result){\n            let element = res.data.result[idx];\n            let id = element[link.attribute];\n            let shown = '';\n            for (const idx1 in link.shown){\n              shown+= element[link.shown[idx1]] + ' ';\n            }\n            let value = {value: id, label: shown, name: column.accessor}\n            values.push(value);\n          }\n          return values;\n        }\n        else{\n          return console.log(res.data.message)\n        }\n      })\n      .catch((err) => {\n        return console.error(err);\n      })\n    }\n\n    getLabel(accessor){\n      console.log(accessor);\n      let options = this.state.options[accessor];\n      let value = this.state.values[accessor];\n      for (let idx in options){\n        let option = options[idx];\n        console.log(option);\n        if(option.value===value){\n          return option.label;\n        }\n      }\n      return value;\n    }\n\n\n  render(){\n    // we use the props to create the form content here as we can't use loops inside the return\n    var formContent = [];\n    var temp = null;\n    // looping through all the props and extracting the needed data\n    for (var idx in this.props.columns){\n      const column = this.props.columns[idx];\n      if(!column.accessor){\n        continue;\n      }\n      if(column.type==='fixed'){\n        continue;\n      }\n      switch(column.type){\n        case 'link':\n          let options = this.state.options[column.accessor];\n          temp = <label name={column.accessor}  className = \"form-group\">\n                    {column.Header}:<br/>\n                    <Select\n                      className='select'\n                      onChange={this.handleChange}\n                      options={options}\n                      key={column.accessor}\n                      value={\n                        this.state.values[column.accessor] &&\n                        {\n                          label: this.getLabel(column.accessor),\n                          value: this.state.values[column.accessor]\n                        }\n                      }\n                      placeholder={lang.prompts.select[language]}\n                    />\n                  </label>;\n                break;\n        case 'dropdown':\n          temp = <label name={column.accessor}  className = \"form-group\">\n                    {column.Header}:<br/>\n                    <Select\n                      className='select'\n                      onChange={this.handleChange}\n                      options={column.options}\n                      key={column.accessor}\n                      value={\n                        this.state.values[column.accessor] &&\n                        {\n                          label: this.state.values[column.accessor],\n                          value: this.state.values[column.accessor]\n                        }\n                      }\n                      placeholder={lang.prompts.select[language]}\n                    />\n                  </label>;\n          break;\n        case 'textarea':\n          temp = <label className = \"form-group\">\n                    {column.Header}:<br/>\n                    <textarea className=\"form-control\" type=\"text\"\n                    rows={column.rows}\n                    cols={column.cols}\n                    name={column.accessor}\n                    key={column.accessor}\n                    value={this.state.values[column.accessor]}\n                    onChange={this.handleChange}></textarea>\n                  </label>;\n          break;\n        default:\n          if (column.visible!==false){\n            temp =   <label >\n                        {column.Header}:<br/>\n                        <input type=\"text\" className=\"form-control\"\n                          name={column.accessor}\n                          key={column.accessor}\n                          value={this.state.values[column.accessor]}\n                          onChange={this.handleChange}/>\n                      </label>;\n            }\n        }\n\n      formContent.push(<div key={column.accessor+'div'} className = \"form-group\">{temp}</div>);\n    }\n    if(this.state.loading){return null}\n    return(\n      <div>\n        <p className = 'error'>{this.state.error}</p>\n        <form onSubmit={this.handleSubmit}>\n          {formContent}\n          <input className='btn btn-primary' type=\"submit\" value=\"Submit\"/>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddForm;\n"]},"metadata":{},"sourceType":"module"}